{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/bg.jpg","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","fetchQuizQuestion","amount","difficulty","a","endPoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNo","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BgImage","SpinnerOverlay","SpinnerContainer","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","console","log","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b47e32c.chunk.js","sourcesContent":["import { shuffleArray } from './utils'\n\nexport type Question = {\n  category: string\n  correct_answer: string\n  difficulty: string\n  incorrect_answers: string[]\n  question: string\n  type: string\n}\n\nexport type QuestionState = Question & { answers: string[] }\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\"\n}\n\nexport const fetchQuizQuestion = async (amount: number, difficulty: Difficulty) => {\n  const endPoint = `https://opentdb.com/api.php?amount=${amount}&type=multiple&difficulty=${difficulty}`;\n  const data = await (await fetch(endPoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n  }))\n}","export const shuffleArray = (array: any[]) => [...array.sort(() => Math.random() - 0.5)]","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n\n  p {\n    font-size: 1rem;\n  }\n`\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n\n  :hover {\n    opacity: 0.5;\n  }\n\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n    correct\n      ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n      : !correct && userClicked\n        ? 'linear-gradient(90deg, #ff5656, #c16868)'\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 3px solid #fff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`","import React from \"react\";\n\n// Types\nimport { AnswerObject } from \"../App\";\n\n//Styles\nimport { ButtonWrapper, Wrapper } from \"./QuestionCard.styles\";\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNo: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNo,\n  totalQuestions,\n}) => (\n  <Wrapper>\n    <p className='number'>\n      Question: {questionNo} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper\n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button disabled={!!userAnswer} value={answer} onClick={callback}>\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\n\nexport default QuestionCard;\n","export default __webpack_public_path__ + \"static/media/bg.c866d607.jpg\";","import styled, { createGlobalStyle } from 'styled-components'\nimport BgImage from './images/bg.jpg'\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n\n  body {\n    background-image: url(${BgImage});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n\n  * {\n    box-sizing: border-box;\n    font-family: 'Catamaran', sans-serif;\n  }\n`\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > p {\n    color: #fff;\n  }\n\n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n\n  h1 {\n    font-family: 'Fascinate Inline', Haettenschweiler, 'Arial Narrow Bold', sans-serif;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-weight: 400;\n    font-size: 70px;\n    text-align: center;\n    margin: 20px\n  }\n\n  .start, .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #fff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;  \n    }\n\n  .start {\n      max-width: 200px;\n    }\n`\n\nexport const SpinnerOverlay = styled.div`\n  /* height: 60vh; */\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const SpinnerContainer = styled.div`\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n  border: 3px solid rgba(256, 256, 356, 1);\n  border-radius: 50%;\n  border-top-color: #636767;\n  animation: spin 1s ease-in-out infinite;\n  -webkit-animation: spin 1s ease-in-out infinite;\n  @keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { fetchQuizQuestion } from \"./API\";\n\n//Components\nimport QuestionCard from \"./components/QuestionCard\";\n\n//Types\nimport { Difficulty, QuestionState } from \"./API\";\n\n//Styles\nimport {\n  GlobalStyle,\n  Wrapper,\n  SpinnerContainer,\n  SpinnerOverlay,\n} from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 15;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    try {\n      setLoading(true);\n      setGameOver(false);\n\n      const newQuestions = await fetchQuizQuestion(\n        TOTAL_QUESTIONS,\n        Difficulty.EASY\n      );\n\n      setQuestions(newQuestions);\n      setScore(0);\n      setUserAnswers([]);\n      setNumber(0);\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // User answers\n      const answer = e.currentTarget.value;\n      // Check answer against the correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    //Move onto the next question, if not the last\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Trivia</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className='start' onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? <p className='score'>Score: {score}</p> : null}\n        {loading ? (\n          <SpinnerOverlay>\n            <SpinnerContainer />\n          </SpinnerOverlay>\n        ) : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNo={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className='next' onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}